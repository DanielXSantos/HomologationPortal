spring:
  profiles:
    active: dev

---

spring:
  profiles: dev
  datasource:
    url: jdbc:mysql://localhost:3306/portal?verifyServerCertificate=false&useSSL=true&createDatabaseIfNotExist=true
    username: root
    password: 123
    testWhileIdle: true
    validationQuery: SELECT 1
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
  thymeleaf:
    mode: LEGACYHTML5
    cache: false
  queries:
    users-query: select email, password, active from user where email=?
    roles-query: select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

---

spring:
  profiles: container
  datasource:
    url: jdbc:mysql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?verifyServerCertificate=false&useSSL=true&createDatabaseIfNotExist=true
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD}
    testWhileIdle: true
    validationQuery: SELECT 1
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
  thymeleaf:
    mode: LEGACYHTML5
    cache: false
  queries:
    users-query: select email, password, active from user where email=?
    roles-query: select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?